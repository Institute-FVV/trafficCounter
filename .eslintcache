[{"C:\\Daten\\git\\trafficcounter\\src\\index.js":"1","C:\\Daten\\git\\trafficcounter\\src\\serviceWorker.js":"2","C:\\Daten\\git\\trafficcounter\\src\\components\\App.js":"3","C:\\Daten\\git\\trafficcounter\\src\\components\\appHeader.js":"4","C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseManager.js":"5","C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseMeasurement.js":"6","C:\\Daten\\git\\trafficcounter\\src\\pages\\measurementView.js":"7","C:\\Daten\\git\\trafficcounter\\src\\components\\help.js":"8","C:\\Daten\\git\\trafficcounter\\src\\components\\errorSnackbar.js":"9","C:\\Daten\\git\\trafficcounter\\src\\components\\useCaseEditor.js":"10","C:\\Daten\\git\\trafficcounter\\src\\components\\config.js":"11","C:\\Daten\\git\\trafficcounter\\src\\components\\measurementButton.js":"12","C:\\Daten\\git\\trafficcounter\\src\\components\\measurementOptions.js":"13","C:\\Daten\\git\\trafficcounter\\src\\components\\loadingBar.js":"14","C:\\Daten\\git\\trafficcounter\\src\\components\\infoSnackbar.js":"15"},{"size":613,"mtime":1604048551008,"results":"16","hashOfConfig":"17"},{"size":5086,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1162,"mtime":1612254673508,"results":"19","hashOfConfig":"17"},{"size":1994,"mtime":1611740772930,"results":"20","hashOfConfig":"17"},{"size":10003,"mtime":1612254745109,"results":"21","hashOfConfig":"17"},{"size":11469,"mtime":1612348181022,"results":"22","hashOfConfig":"17"},{"size":6746,"mtime":1611743664911,"results":"23","hashOfConfig":"17"},{"size":2486,"mtime":1611131739544,"results":"24","hashOfConfig":"17"},{"size":1389,"mtime":1611066176386,"results":"25","hashOfConfig":"17"},{"size":6586,"mtime":1612254031464,"results":"26","hashOfConfig":"17"},{"size":643,"mtime":1605895790118,"results":"27","hashOfConfig":"17"},{"size":1656,"mtime":1611853698238,"results":"28","hashOfConfig":"17"},{"size":5446,"mtime":1612345824627,"results":"29","hashOfConfig":"17"},{"size":593,"mtime":1611063103415,"results":"30","hashOfConfig":"17"},{"size":1436,"mtime":1611676300926,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"6khglt",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Daten\\git\\trafficcounter\\src\\index.js",[],["64","65"],"C:\\Daten\\git\\trafficcounter\\src\\serviceWorker.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\App.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\appHeader.js",[],"C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseManager.js",[],"C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseMeasurement.js",[],"C:\\Daten\\git\\trafficcounter\\src\\pages\\measurementView.js",["66"],"import React, { Component, Fragment, forwardRef  } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  withStyles,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { compose } from 'recompose';\r\n\r\n// icons for material table\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport MaterialTable from 'material-table'\r\n\r\nimport ErrorSnackbar from '../components/errorSnackbar';\r\nimport LoadingBar from '../components/loadingBar'\r\n\r\n// definition used for material table\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\nconst styles = theme => ({\r\n});\r\n\r\nclass MeasurementView extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      useCase: \"\",\r\n      measurements: [],\r\n\r\n      loading: true,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMeasurements();\r\n  }\r\n\r\n  async fetch(method, endpoint, body) {\r\n    this.setState({loading: true})\r\n\r\n    try {\r\n      const response = await fetch(`/api${endpoint}`, {\r\n        method,\r\n        body: body && JSON.stringify(body),\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          accept: 'application/json',\r\n        },\r\n      });\r\n\r\n      this.setState({loading: false})\r\n      \r\n      if(response.ok && (response.status === 201 || response.status === 200)) {\r\n        return await response.json();\r\n      } else {\r\n        console.error(response.status)\r\n        this.setState({\r\n          error: { message: \"Error when communicating with backend: \" + response.statusText }\r\n        })\r\n\r\n        throw new Error(\"Error communicating with backend\")\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n\r\n      this.setState({ \r\n        error: error,\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  async getMeasurements() {\r\n    const useCaseId = this.props.match.params.id\r\n\r\n    // get use case and corresponding measurements\r\n    let useCase = (await this.fetch('get', '/usecases/' + useCaseId + \"/measurements\")) || []\r\n    let measurements = useCase.measurements\r\n    let tableOutput = []\r\n\r\n    if(measurements) {\r\n      measurements.forEach(measurement => {\r\n          tableOutput.push({\r\n            useCase: useCase.name,\r\n            groupName: measurement.groupName,\r\n            value: measurement.value,\r\n            timestamp: measurement.timestamp.split(\"+\")[0]\r\n          })\r\n      })\r\n\r\n      this.setState({ \r\n        useCase: useCase, \r\n        measurements: measurements,\r\n        tableOutput: tableOutput\r\n      });\r\n    }\r\n  }\r\n\r\n  getDateTime() {\r\n    const today = new Date();\r\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n    const time = today.getHours() + \"-\" + today.getMinutes() + \"-\" + today.getSeconds();\r\n    \r\n    return date + '_' + time;\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const title = \"List measurements for \" + this.state.useCase.name                              // define title of website\r\n    const exportFileName = \"list_measurements_\" + this.state.useCase.name + \"_\" + this.getDateTime()        // define export file name \r\n\r\n    return (\r\n      <Fragment>\r\n        {this.state.measurements.length > 0 ? (\r\n          // data available, present table\r\n          <MaterialTable\r\n            icons={ tableIcons }\r\n            title={ title }\r\n            columns={[\r\n              { title: 'Use case', field: 'useCase'},\r\n              { title: 'Measurement group', field: 'groupName'},\r\n              { title: 'Measurement value', field: 'value' },\r\n              { title: 'Timestamp', field: 'timestamp' }\r\n            ]}\r\n            data={ this.state.tableOutput }        \r\n            options={{\r\n              exportFileName: exportFileName,\r\n              exportButton: true,\r\n              exportAllData: true,\r\n              filtering: true,\r\n              search: false,\r\n              pageSize: 20,\r\n              pageSizeOptions: [20, 50,100,1000]\r\n            }}\r\n          />\r\n        ) : (\r\n          // no data available\r\n          !this.state.loading && (\r\n            <Typography variant=\"subtitle1\">So far no measurements have been recorded for use case { this.state.useCase.name }</Typography>\r\n          )\r\n        )}\r\n\r\n        { /* Flag based display of error snackbar */ }\r\n        {this.state.error && (\r\n          <ErrorSnackbar\r\n            onClose={() => this.setState({ error: null })}\r\n            message={ this.state.error.message }\r\n          />\r\n        )}\r\n\r\n        { /* Flag based display of loadingbar */ }\r\n        {this.state.loading && (\r\n          <LoadingBar/>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles),\r\n)(MeasurementView);","C:\\Daten\\git\\trafficcounter\\src\\components\\help.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\errorSnackbar.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\useCaseEditor.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\config.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\measurementButton.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\measurementOptions.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\loadingBar.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\infoSnackbar.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":140,"column":13,"nodeType":"73","messageId":"74","endLine":140,"endColumn":20},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]