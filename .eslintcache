[{"C:\\Daten\\git\\trafficcounter\\src\\index.js":"1","C:\\Daten\\git\\trafficcounter\\src\\serviceWorker.js":"2","C:\\Daten\\git\\trafficcounter\\src\\components\\App.js":"3","C:\\Daten\\git\\trafficcounter\\src\\components\\appHeader.js":"4","C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseManager.js":"5","C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseMeasurement.js":"6","C:\\Daten\\git\\trafficcounter\\src\\pages\\measurementView.js":"7","C:\\Daten\\git\\trafficcounter\\src\\components\\help.js":"8","C:\\Daten\\git\\trafficcounter\\src\\components\\errorSnackbar.js":"9","C:\\Daten\\git\\trafficcounter\\src\\components\\useCaseEditor.js":"10","C:\\Daten\\git\\trafficcounter\\src\\components\\config.js":"11","C:\\Daten\\git\\trafficcounter\\src\\components\\measurementButton.js":"12","C:\\Daten\\git\\trafficcounter\\src\\components\\measurementOptions.js":"13","C:\\Daten\\git\\trafficcounter\\src\\components\\loadingBar.js":"14"},{"size":613,"mtime":1604048551008,"results":"15","hashOfConfig":"16"},{"size":5086,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":1159,"mtime":1611066107620,"results":"18","hashOfConfig":"16"},{"size":1953,"mtime":1611069774718,"results":"19","hashOfConfig":"16"},{"size":8795,"mtime":1611064762006,"results":"20","hashOfConfig":"16"},{"size":6410,"mtime":1611065769908,"results":"21","hashOfConfig":"16"},{"size":6114,"mtime":1611050779396,"results":"22","hashOfConfig":"16"},{"size":2498,"mtime":1611069110007,"results":"23","hashOfConfig":"16"},{"size":1389,"mtime":1611066176386,"results":"24","hashOfConfig":"16"},{"size":5826,"mtime":1611069537878,"results":"25","hashOfConfig":"16"},{"size":643,"mtime":1605895790118,"results":"26","hashOfConfig":"16"},{"size":1387,"mtime":1611069446195,"results":"27","hashOfConfig":"16"},{"size":3802,"mtime":1611069463516,"results":"28","hashOfConfig":"16"},{"size":593,"mtime":1611063103415,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"6khglt",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Daten\\git\\trafficcounter\\src\\index.js",[],["61","62"],"C:\\Daten\\git\\trafficcounter\\src\\serviceWorker.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\App.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\appHeader.js",[],"C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseManager.js",[],"C:\\Daten\\git\\trafficcounter\\src\\pages\\useCaseMeasurement.js",[],"C:\\Daten\\git\\trafficcounter\\src\\pages\\measurementView.js",["63"],"import React, { Component, Fragment, forwardRef  } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  withStyles,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { compose } from 'recompose';\r\n\r\n// icons for material table\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport MaterialTable from 'material-table'\r\n\r\nimport ErrorSnackbar from '../components/errorSnackbar';\r\n\r\n// definition used for material table\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\nconst styles = theme => ({\r\n});\r\n\r\nclass MeasurementView extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      useCase: \"\",\r\n      measurements: [],\r\n\r\n      loading: true,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMeasurements();\r\n  }\r\n\r\n  async fetch(method, endpoint, body) {\r\n    this.setState({loading: true})\r\n\r\n    try {\r\n      const response = await fetch(`/api${endpoint}`, {\r\n        method,\r\n        body: body && JSON.stringify(body),\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          accept: 'application/json',\r\n        },\r\n      });\r\n\r\n      this.setState({loading: false})\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(error);\r\n\r\n      this.setState({ \r\n        error: error,\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  async getMeasurements() {\r\n    const useCaseId = this.props.history.location.pathname.split('/')[2];\r\n\r\n    // get use case and corresponding measurements\r\n    let useCase = (await this.fetch('get', '/useCases/' + useCaseId)) || []\r\n    let measurements = (await this.fetch('get', '/measurements/?useCaseId=' + useCaseId)) || []\r\n\r\n    // replace usecase id with usecase name\r\n    // remove time zone information\r\n    measurements.forEach(function (element) {\r\n      element.useCase = useCase.name\r\n      element.createdAt = element.createdAt.replace(\"+01\", \"\")\r\n      element.createdAt = element.createdAt.replace(\"+02\", \"\")\r\n    })\r\n\r\n    this.setState({ \r\n      useCase: useCase, \r\n      measurements: measurements\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const title = \"List measurements for \" + this.state.useCase.name                              // define title of website\r\n    const today = new Date();\r\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n    const time = today.getHours() + \"-\" + today.getMinutes() + \"-\" + today.getSeconds();\r\n    const dateTime = date + '_' + time;\r\n    const exportFileName = \"list_measurements_\" + this.state.useCase.name + \"_\" + dateTime        // define export file name \r\n\r\n    return (\r\n      <Fragment>\r\n        {this.state.measurements.length > 0 ? (\r\n          // data available, present table\r\n          <MaterialTable\r\n            icons={ tableIcons }\r\n            title={ title }\r\n            columns={[\r\n              { title: 'Use case', field: 'useCase'},\r\n              { title: 'Measurement group', field: 'groupName'},\r\n              { title: 'Measurement value', field: 'value' },\r\n              { title: 'Created at', field: 'createdAt' }\r\n            ]}\r\n            data={ this.state.measurements }        \r\n            options={{\r\n              exportFileName: exportFileName,\r\n              exportButton: true,\r\n              exportAllData: true,\r\n              filtering: true,\r\n              search: false,\r\n              pageSize: 20,\r\n              pageSizeOptions: [20, 50,100,1000]\r\n            }}\r\n          />\r\n        ) : (\r\n          // no data available\r\n          !this.state.loading && (\r\n            <Typography variant=\"subtitle1\">So far no measurements have been recorded for use case { this.state.useCase.name }</Typography>\r\n          )\r\n        )}\r\n\r\n        {this.state.error && (\r\n          <ErrorSnackbar\r\n            onClose={() => this.setState({ error: null })}\r\n            message={ this.state.error.message }\r\n          />\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles),\r\n)(MeasurementView);","C:\\Daten\\git\\trafficcounter\\src\\components\\help.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\errorSnackbar.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\useCaseEditor.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\config.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\measurementButton.js",[],"C:\\Daten\\git\\trafficcounter\\src\\components\\measurementOptions.js",["64"],"import React, { Component } from 'react';\r\nimport {\r\n  TextField,\r\n  withStyles,\r\n  Button\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { compose } from 'recompose';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst styles = theme => ({\r\n});\r\n\r\nclass MeasurementOptions extends Component {\r\n    constructor() {\r\n        super();\r\n        \r\n        this.state = {\r\n            id: 0,\r\n            name: \"\", \r\n            options: [\r\n                { name: \"\" }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id, name, options } = this.props\r\n        \r\n        // update id, because this is always given\r\n        this.setState({\r\n            id: id,\r\n        })\r\n\r\n        // only update options if something has provided, otherwise leave default\r\n        if(options) {\r\n          this.setState({\r\n            name: name, \r\n            options: options\r\n          })\r\n        }\r\n    }\r\n    \r\n    // updates the measurement option on the given index with the given event value\r\n    handleMeasurementOptionChange = idx => evt => {\r\n        const { handleOptionChange } = this.props\r\n        const newOptions = this.state.options.map((option, sidx) => {\r\n            if (idx !== sidx) return option;\r\n            return { ...option, name: evt.target.value };\r\n        });\r\n    \r\n        this.setState({ options: newOptions });\r\n\r\n        // execute parent function in usecaseEditor\r\n        handleOptionChange(this.state.id, newOptions);\r\n    };\r\n\r\n    // add measurement option\r\n    handleAddMeasurementOption = () => {\r\n        this.setState({\r\n            options: this.state.options.concat([{ name: \"\" }])\r\n        });\r\n    };\r\n    \r\n    // remove measurement option\r\n    handleRemoveMeasurementOption = idx => () => {\r\n        const { handleOptionChange } = this.props\r\n        let tempOptions = this.state.options.filter((s, sidx) => idx !== sidx)\r\n\r\n        this.setState({\r\n            options: tempOptions\r\n            }\r\n        );\r\n\r\n        // update parent state\r\n        handleOptionChange(this.state.id, tempOptions)\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {this.state.options.map((option, idx) => (\r\n                    <div className=\"options\" key={`div-${idx + 1}`}>\r\n                        <TextField\r\n                            required \r\n                            key={this.idx + 1}\r\n                            type=\"text\"\r\n                            placeholder={`Option #${idx + 1} name`}\r\n                            value={option.name}\r\n                            onChange={this.handleMeasurementOptionChange(idx)}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                        />\r\n                        \r\n                        <Button \r\n                            size=\"small\" \r\n                            color=\"primary\" \r\n                            type=\"button\"\r\n                            onClick={this.handleRemoveMeasurementOption(idx)}\r\n                        >\r\n                            <DeleteIcon/> Remove Option\r\n                        </Button>\r\n\r\n                        <Button \r\n                            size=\"small\" \r\n                            color=\"primary\" \r\n                            type=\"button\" \r\n                            onClick={this.handleAddMeasurementOption}\r\n                        >\r\n                            <AddIcon/> Add Option\r\n                        </Button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    withStyles(styles),\r\n  )(MeasurementOptions);","C:\\Daten\\git\\trafficcounter\\src\\components\\loadingBar.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":116,"column":13,"nodeType":"71","messageId":"72","endLine":116,"endColumn":20},{"ruleId":"69","severity":1,"message":"70","line":81,"column":17,"nodeType":"71","messageId":"72","endLine":81,"endColumn":24},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]